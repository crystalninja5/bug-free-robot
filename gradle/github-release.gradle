import groovy.text.GStringTemplateEngine
import org.codehaus.groovy.runtime.DateGroovyMethods

apply plugin: 'distribution'
apply plugin: 'net.researchgate.release'
apply plugin: 'co.riiid.gradle'

ext.set("unsnapshottedVersion", VERSION_NAME.replaceAll("-SNAPSHOT", ""))
ext.set("samples", project(":samples").subprojects.collect { it.path })
ext.set("isReleaseVersion", !VERSION_NAME.endsWith("SNAPSHOT"))

["githubToken", "ossrhUsername", "ossrhPassword",
 "signing.keyId", "signing.password", "signing.secretKeyRingFile",].each {
    checkAndDefaultProperty(it)
}

def generateReleaseNotes() {
    def changelogSnippet = generateChangelogSnippet()
    def model = [title  : "Uber Rides Android SDK (Beta) v${unsnapshottedVersion}",
                 date   : DateGroovyMethods.format(new Date(), 'MM/dd/yyyy'),
                 snippet: changelogSnippet,
                 assets : project.samples.collect {
                     [
                             title      : project(it).name,
                             download   : GITHUB_DOWNLOAD_PREFIX + "v${unsnapshottedVersion}/"
                                     + project(it).name + "-v${unsnapshottedVersion}.zip",
                             description: project(it).description,
                     ]
                 }]
    def engine = new GStringTemplateEngine()
    def template = engine.createTemplate(rootProject.file('releasenotes.gtpl')).make(model)
    return template.toString()
}

def generateChangelogSnippet() {
    def changelog = rootProject.file('CHANGELOG.md').text
    def snippet = ""
    def stop = false
    changelog.eachLine { line, count ->
        if (count >= 2) {
            stop = stop || line.startsWith("v");
            if (!stop) {
                snippet += line + "\n";
            }
        }
    }
    return "  " + snippet.trim()
}

def checkAndDefaultProperty(prop) {
    if (!project.hasProperty(prop)) {
        logger.warn("Add " + prop + " to your ~/.gradle/gradle.properties file.")
        rootProject.ext.set(prop, prop)
    }
}

def checkForChangelogUpdates(task) {
    def changelogtext = rootProject.file('CHANGELOG.md').text
    if (!changelogtext.startsWith("v${unsnapshottedVersion} -")) {
        throw new AssertionError(
                "Changelog must be updated with v{$unsnapshottedVersion} before release. Please check " +
                        rootProject.file('CHANGELOG.md').absolutePath)
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    println task.path
    if (task.path.endsWith("release") || task.path.endsWith("githubReleaseZip")
            || task.path.endsWith("publicrepoDistZip")) {
        checkForChangelogUpdates(task)
    }
}

// Skip signing archives on Jenkins when -SNAPSHOT is being checked in.
gradle.taskGraph.beforeTask { Task task ->
    if (task.path.contains("sign") && !ext.isReleaseVersion) {
        task.enabled = false
    }
}

task updateChangelog() << {
    def newVersion = findProperty("version").replaceAll('-SNAPSHOT', '')
    def changelog = rootProject.file('CHANGELOG.md')
    def changelogText = changelog.text
    if (!changelogText.startsWith("v${newVersion} -")) {
        def updatedChangelog = "v${newVersion} - TBD\n"
        def dashesCount = updatedChangelog.length()-1
        updatedChangelog += "-"*dashesCount + "\n\n"

        changelog.write(updatedChangelog + changelogText)
    }
}

afterReleaseBuild.dependsOn(":core-android:uploadArchives", ":rides-android:uploadArchives")
updateVersion.dependsOn ":githubRelease"
commitNewVersion.dependsOn ':updateChangelog'
githubRelease.dependsOn project(":samples").subprojects.collect { it.path + ":githubReleaseZip" }

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    revertOnFail = true
    tagTemplate = "v${unsnapshottedVersion}"
}

github {
    owner = GITHUB_OWNER
    repo = GITHUB_REPO
    token = "${githubToken}"
    tagName = "v${unsnapshottedVersion}"
    targetCommitish = GITHUB_BRANCH
    name = "v${unsnapshottedVersion}"
    body = generateReleaseNotes()
    assets = project.samples.collect {
        project(it).buildDir.absolutePath + "/distributions/" + project(it).name +
                "-v${unsnapshottedVersion}.zip"
    }
}

distributions {
    publicrepo {
        baseName = 'publicrepo'
        contents {
            from(rootDir) {
                include 'build.gradle'
                include 'CHANGELOG.md'
                include 'gradle.properties'
                include 'gradlew'
                include 'gradlew.bat'
                include 'LICENSE'
                include 'releasenotes.gtpl'
                include 'settings.gradle'
                include 'gradle/'
                include 'config'
                include 'test-shared/'
                include '.travis.yml'
                include 'README.md'
                include '.buildscript/'
            }

            from('core-android') {
                exclude 'build'
                exclude '*.iml'
                into 'core-android'
            }

            from('rides-android') {
                exclude 'build'
                exclude '*.iml'
                into 'rides-android'
            }

            from('samples') {
                exclude '**/build'
                exclude '**/*.iml'
                into 'samples'
            }
        }
    }
}

subprojects {
    configure(subprojects.findAll {it.parent.name == 'samples'}) {
        task githubReleaseZip(type: Zip) << {
            version = "v${unsnapshottedVersion}"

            from('.') {
                filesNotMatching("**/*.png") {
                    filter { String line ->
                        line.replaceAll("compile project\\(':rides-android'\\)",
                                "compile '${groupId}:rides-android:${unsnapshottedVersion}'")
                    }
                    filter { String line ->
                        line.replaceAll("compile project\\(':core-android'\\)",
                                "compile '${groupId}:core-android:${unsnapshottedVersion}'")
                    }
                }
                into '.'
                exclude 'build'
                exclude '*.iml'
            }

            from(rootProject.projectDir.absolutePath) {
                include 'gradle/'
                include 'gradlew'
                include 'gradlew.bat'
                include 'LICENSE'
                into '.'
            }

            from('build/poms') {
                include 'pom-default.xml'
                rename { String fileName ->
                    fileName.replaceAll('-default', '')
                }
                filter { String line ->
                    line.replaceAll('-SNAPSHOT', '')
                }
                into '.'
            }
        }
    }


}